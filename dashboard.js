var
text
=
"//
consolidated
dashboard.js
const
SUPABASE_URL
=
\"https://hafzffbdqlojkuhgfsvy.supabase.co\";
const
SUPABASE_ANON_KEY
=
\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhZnpmZmJkcWxvamt1aGdmc3Z5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxOTA0NTksImV4cCI6MjA3NDc2NjQ1OX0.fYBo6l_W1lYE_sGnaxRZyroXHac1b1sXqxgJkqT5rnk\";
const
supabase
=
window.supabase.createClient(SUPABASE_URL,
SUPABASE_ANON_KEY);
//
DOM
const
pfWelcome
=
document.getElementById(\"pf-welcome\");
const
accountCards
=
document.getElementById(\"accountCards\");
const
logoutBtn
=
document.getElementById(\"logoutBtnSidebar\");
const
addMoneyBtn
=
document.getElementById(\"addMoneyBtn\");
const
lastLoginEl
=
document.getElementById(\"lastLogin\");
const
totalBalanceEl
=
document.getElementById(\"totalBalance\");
const
accountCountEl
=
document.getElementById(\"accountCount\");
const
activityWrapper
=
document.getElementById(\"activityWrapper\");
const
refreshActivityBtn
=
document.getElementById(\"refreshActivityBtn\");
const
viewAllActivityBtn
=
document.getElementById(\"viewAllActivityBtn\");
const
openSafeguardBtn
=
document.getElementById(\"openSafeguardBtn\");
const
openSafeguardEditorBtn
=
document.getElementById(\"openSafeguardEditorBtn\");
//
safe
escape
helper
function
esc(s){
if
(s
==
null)
return
\"\";
return
String(s).replaceAll(\"&\",\"&\").replaceAll(\"<\",\"<\").replaceAll(\">\",\">\");
}
//
account
type
friendly
title
function
acctTitle(t){
const
map
=
{
checking:
\"Federal
Checking
Account\",
savings:
\"Capital
Savings
Account\",
benefits:
\"Federal
Benefits
Account\"
};
return
map[(t||\"\").toLowerCase()]
||
(t
||
\"Account\");
}
//
small
util
to
create
modal
nodes
(animated
via
CSS
in
HTML)
function
createModal(innerHTML){
const
wrapper
=
document.createElement(\"div\");
wrapper.className
=
\"modal\";
wrapper.setAttribute(\"aria-hidden\",\"false\");
wrapper.innerHTML
=
<div
class=\"modal-panel\"
role=\"dialog\"
aria-modal=\"true\">${innerHTML}</div>;
//
attach
close
handlers
for
any
[data-close]
elements
inside
content
wrapper.querySelectorAll(\"[data-close]\").forEach(btn
=>
btn.addEventListener(\"click\",
()
=>
wrapper.remove()));
//
close
when
overlay
clicked
wrapper.addEventListener(\"click\",
(e)
=>
{
if
(e.target
===
wrapper)
wrapper.remove();
});
document.body.appendChild(wrapper);
return
wrapper;
}
function
closeModal(modal){
if
(modal
&&
modal.remove)
modal.remove();
}
//
---
on
load
document.addEventListener(\"DOMContentLoaded\",
async
()
=>
{
const
{
data:
{
user
}
}
=
await
supabase.auth.getUser();
if
(!user)
{
window.location.href
=
\"index.html\";
return;
}
//
load
name
from
profiles
or
metadata
const
{
data:
profile,
error:
profileErr
}
=
await
supabase.from(\"profiles\").select(\"full_name,
first_name,
last_name\").eq(\"id\",
user.id).single();
console.log(\"Auth
user:\",
user);
console.log(\"Profile
row:\",
profile,
\"err:\",
profileErr);
let
displayName
=
\"\";
if
(profile)
{
if
(profile.full_name
&&
profile.full_name.trim().length)
displayName
=
profile.full_name.trim();
else
{
const
fn
=
(profile.first_name||\"\").trim();
const
ln
=
(profile.last_name||\"\").trim();
if
(fn
||
ln)
displayName
=
${fn}
${ln}.trim();
}
}
if
(!displayName
&&
user?.user_metadata)
{
const
meta
=
user.user_metadata;
displayName
=
meta.full_name
||
meta.name
||
${meta.first_name
||
\"\"}
${meta.last_name
||
\"\"}.trim()
||
\"\";
}
if
(!displayName)
{
const
email
=
user.email
||
\"\";
displayName
=
email.split(\"@\")[0]
||
\"—\";
}
if (displayName) {
  // Capitalize first letter of each word and ensure space between names
  displayName = displayName
    .split(/[\s_]+/)
    .map(w => w.charAt(0).toUpperCase() + w.slice(1).toLowerCase())
    .join(" ");
}
pfWelcome.textContent = displayName || "—";

lastLoginEl.textContent
=
user.last_sign_in_at
?
new
Date(user.last_sign_in_at).toLocaleString()
:
\"—\";
//
ensure
default
accounts
exist
(if
your
original
code
used
it)
await
ensureDefaultAccounts(user.id);
//
load
accounts
await
loadAccounts(user.id);
//
load
recent
activity
await
loadRecentActivity(user.id);
//
wire
up
UI
controls
setupSidebarHandlers();
wireStaticModalControls();
if
(addMoneyBtn)
addMoneyBtn.addEventListener(\"click\",
()
=>
openInitiateDeposit());
if
(refreshActivityBtn)
refreshActivityBtn.addEventListener(\"click\",
()
=>
loadRecentActivity(user.id));
if
(viewAllActivityBtn)
viewAllActivityBtn.addEventListener(\"click\",
()
=>
openActivityPage(user.id));
if
(openSafeguardBtn)
openSafeguardBtn.addEventListener(\"click\",
()
=>
openSafeguardOptions());
if
(openSafeguardEditorBtn)
openSafeguardEditorBtn.addEventListener(\"click\",
()
=>
openStaticModal('safeguardEditorModal'));
});
//
---
accounts
helpers
(kept
from
original)
async
function
ensureDefaultAccounts(user_id){
const
{
data:
existing
}
=
await
supabase.from(\"accounts\").select(\"account_type\").eq(\"user_id\",
user_id);
const
existingTypes
=
(existing||[]).map(r
=>
(r.account_type||\"\").toLowerCase());
const
defaults
=
[{t:\"checking\"},{t:\"savings\"},{t:\"benefits\"}];
for
(const
d
of
defaults){
if
(!existingTypes.includes(d.t)){
await
supabase.from(\"accounts\").insert({
user_id,
account_type:
d.t,
account_number:
generateAccountNumber(),
balance:
0
},
{
returning:
\"minimal\"
});
}
}
}
async
function
loadAccounts(user_id){
const
{
data:
accounts,
error
}
=
await
supabase.from(\"accounts\").select(\"*\").eq(\"user_id\",
user_id).order(\"created_at\",{ascending:true});
if
(error)
{
console.error(\"load
accounts:\",
error);
accountCards.innerHTML
=
<p
class=\"muted\">Error
loading
accounts</p>;
return;
}
accountCards.innerHTML
=
\"\";
let
total
=
0;
if
(!accounts
||
accounts.length
===
0)
{
accountCards.innerHTML
=
<p
class=\"muted\">No
accounts
available.</p>;
}
else
{
for
(const
acc
of
accounts){
total
+=
Number(acc.balance
||
0);
const
card
=
document.createElement(\"div\");
card.className
=
\"account-card\";
card.innerHTML
=
<div
class=\"ac-top\">
<div>
<div
class=\"ac-type\">${esc(acctTitle(acc.account_type))}</div>
<div
class=\"ac-number\">${esc(acc.account_number
||
\"—\")}</div>
</div>
<div
class=\"ac-balance\">$${Number(acc.balance||0).toFixed(2)}</div>
</div>
<button
class=\"btn-primary
mt-3
w-full\"
data-account-id=\"${esc(acc.id)}\">Initiate
Deposit</button>
;
card.querySelector(\"button[data-account-id]\").addEventListener(\"click\",
()
=>
openInitiateDeposit(acc.id));
accountCards.appendChild(card);
}
}
totalBalanceEl.textContent
=
$${Number(total||0).toFixed(2)};
accountCountEl.textContent
=
accounts
?
accounts.length
:
0;
}
function
generateAccountNumber(){
return
\"AC-\"
+
Math.floor(100000000
+
Math.random()*900000000);
}
//
----------------
Deposit
selector
(three
options)
----------------
function
openInitiateDeposit(accountId){
const
modal
=
createModal(
<h3>Initiate
Deposit</h3>
<p
class=\"muted
txt-small\">Choose
a
deposit
flow:</p>
<div
style=\"display:grid;grid-template-columns:repeat(3,1fr);gap:12px;margin-top:12px\">
${depositOptionCard(\"account_transfer\",\"Transfer
from
Own
Accounts\",\"Move
funds
between
your
FRA
accounts
instantly,
fee-free.\")}
${depositOptionCard(\"wire_transfer\",\"Wire
Transfer\",\"Use
an
external
bank
wire
to
fund
your
FRA
account.\")}
${depositOptionCard(\"safeguard\",\"Safeguard
Method\",\"Use
secured
channels:
Wire
/
Crypto
/
Gold
/
Cash
(NDA
required).\")}
</div>
<div
class=\"btn-row\"
style=\"margin-top:14px\"><button
class=\"btn-ghost\"
data-close>Close</button></div>
);
modal.querySelectorAll(\"[data-option-key]\").forEach(btn
=>
{
btn.addEventListener(\"click\",
()
=>
{
const
key
=
btn.getAttribute(\"data-option-key\");
closeModal(modal);
if
(key
===
\"safeguard\")
openSafeguardOptions(accountId);
else
if
(key
===
\"account_transfer\")
openAccountTransferModal(accountId);
else
if
(key
===
\"wire_transfer\")
openWireTransferModal(accountId);
});
});
}
function
depositOptionCard(key,title,desc){
return
<div
style=\"background:linear-gradient(180deg,#fff,#fbfdff);border-radius:10px;padding:14px;border:1px
solid
#eef6ff;box-shadow:0
10px
30px
rgba(2,6,23,0.04)\">
<div
style=\"font-weight:700\">${esc(title)}</div>
<div
class=\"txt-small
muted\"
style=\"margin-top:6px\">${esc(desc)}</div>
<div
style=\"margin-top:12px;text-align:right\">
<button
class=\"btn-primary\"
data-option-key=\"${esc(key)}\">Select</button>
</div>
</div>
;
}
function
openAccountTransferModal(accountId){
createModal(
<h3>Transfer
from
Own
Accounts</h3>
<p
class=\"muted
small\">This
demo
flow
shows
how
quick
internal
transfers
would
behave.
In
production,
you'd
select
source,
destination
and
an
amount
here.</p>
<div
class=\"btn-row\"><button
class=\"btn-ghost\"
data-close>Close</button></div>
);
}
function
openWireTransferModal(accountId){
createModal(
<h3>Wire
Transfer</h3>
<p
class=\"muted
small\">Use
the
FRA
wire
details
to
send
funds.
After
transfer,
provide
the
reference
so
we
can
credit
your
account.</p>
<div
class=\"btn-row\"><button
class=\"btn-ghost\"
data-close>Close</button></div>
);
}
//
-----------------
Safeguard
(4
options
+
NDA)
-----------------
function
openSafeguardOptions(accountId){
const
modal
=
createModal(
<h3>Safeguard
Methods</h3>
<p
class=\"muted
txt-small\">Select
a
secured
deposit
channel.
After
selection
you
will
accept
a
short
NDA
and
then
view
instructions.</p>
<div
style=\"display:grid;grid-template-columns:repeat(4,1fr);gap:10px;margin-top:12px\">
${safeguardButton(\"wire_transfer\",\"Wire
Transfer\")}
${safeguardButton(\"crypto\",\"Cryptocurrency\")}
${safeguardButton(\"gold\",\"Gold
Reserve\")}
${safeguardButton(\"cash\",\"Cash
Deposit\")}
</div>
<div
style=\"margin-top:12px;text-align:right\"><button
class=\"btn-ghost\"
data-close>Close</button></div>
);
modal.querySelectorAll(\"[data-method]\").forEach(b
=>
b.addEventListener(\"click\",
()
=>
{
const
method
=
b.getAttribute(\"data-method\");
closeModal(modal);
openNDAAgreement(method,
accountId);
}));
}
function
safeguardButton(key,label){
return
<button
class=\"btn-ghost\"
data-method=\"${esc(key)}\"
style=\"padding:12px;border-radius:10px\">${esc(label)}</button>;
}
function
openNDAAgreement(methodKey,
accountId){
const
modal
=
createModal(
<h3>Non-Disclosure
Agreement</h3>
<p
class=\"muted
small\">Privacy
&
confidentiality
notice:
FRA
treats
deposit
instructions
and
account
routing
details
as
strictly
confidential.
By
proceeding
you
agree
not
to
share
deposit
credentials,
wallet
addresses,
bank
account
numbers,
or
references
with
any
third
party.
FRA
may
suspend
or
cancel
services
if
confidentiality
is
breached.</p>
<ul
class=\"txt-small
muted\"
style=\"margin-top:8px\">
<li>•
You
will
not
record
or
redistribute
any
deposit
instructions.</li>
<li>•
Information
provided
is
for
the
named
account
holder
only.</li>
<li>•
FRA
is
not
responsible
for
shared
leaks
once
you
acknowledge
the
instructions.</li>
</ul>
<div
style=\"margin-top:10px\">
<label
style=\"display:block\"><input
type=\"checkbox\"
id=\"nda1\">
I
acknowledge
that
deposit
details
are
confidential
and
understand
the
privacy
terms.</label>
<label
style=\"display:block;margin-top:6px\"><input
type=\"checkbox\"
id=\"nda2\">
I
will
not
share
or
publish
any
deposit
credentials
and
agree
to
FRA
privacy
policy.</label>
</div>
<div
class=\"btn-row\"
style=\"margin-top:12px\">
<button
class=\"btn-primary\"
id=\"ndaProceed\"
disabled>Proceed</button>
<button
class=\"btn-ghost\"
data-close>Cancel</button>
</div>
);
const
c1
=
modal.querySelector(\"#nda1\"),
c2
=
modal.querySelector(\"#nda2\"),
btn
=
modal.querySelector(\"#ndaProceed\");
[c1,c2].forEach(c
=>
c.addEventListener(\"change\",
()
=>
{
btn.disabled
=
!(c1.checked
&&
c2.checked);
}));
btn.addEventListener(\"click\",
async
()
=>
{
closeModal(modal);
await
showDepositInstructions(methodKey,
accountId);
});
}
async
function
showDepositInstructions(methodKey,
accountId){
const
{
data:
{
user
}
}
=
await
supabase.auth.getUser();
if
(!user)
return;
//
try
user-specific,
else
global
default
(user_id
null)
let
{
data:
instr
}
=
await
supabase.from(\"deposit_instructions\").select(\"*\").eq(\"user_id\",
user.id).eq(\"method_key\",
methodKey).single();
if
(!instr)
{
const
{
data:
globalInstr
}
=
await
supabase.from(\"deposit_instructions\").select(\"*\").is(\"user_id\",
null).eq(\"method_key\",
methodKey).single();
instr
=
globalInstr;
}
const
details
=
instr
?
instr.details
:
<p
class=\"muted
small\">No
instructions
provided
yet.
Admins
can
add
method-specific
instructions
from
the
Safeguard
Editor
or
direct
SQL
into
the
deposit_instructions
table.</p>;
createModal(<h3>Deposit
Details
—
${esc(formatMethod(methodKey))}</h3><div
style=\"margin-top:8px\">${details}</div><div
class=\"btn-row\"><button
class=\"btn-ghost\"
data-close>Close</button></div>);
}
function
formatMethod(k){
return
{
wire_transfer:\"Wire
Transfer\",
crypto:\"Cryptocurrency\",
gold:\"Gold
Reserve\",
cash:\"Cash
Deposit\"
}[k]
||
k;
}
//
----------------
Sidebar
handlers
&
static
modals
----------------
function
setupSidebarHandlers(){
document.querySelectorAll(\".nav-item[data-target]\").forEach(item=>
item.addEventListener(\"click\",
()=>
{
const
target
=
item.dataset.target;
document.querySelectorAll(\"section\").forEach(s=>s.classList.add(\"hidden\"));
document.getElementById(target).classList.remove(\"hidden\");
document.querySelectorAll(\".nav-item\").forEach(i=>i.classList.remove(\"active\"));
item.classList.add(\"active\");
}));
document.getElementById(\"openRequestDebit\").onclick
=
()
=>
openStaticModal(\"requestDebitModal\");
document.getElementById(\"openRequestCheck\").onclick
=
()
=>
openStaticModal(\"requestCheckModal\");
document.getElementById(\"openChangePassword\").onclick
=
()
=>
openStaticModal(\"changePasswordModal\");
document.getElementById(\"openContact\").onclick
=
()
=>
openStaticModal(\"supportModal\");
if
(logoutBtn)
logoutBtn.addEventListener(\"click\",
async
()=>
{
await
supabase.auth.signOut();
window.location.href
=
\"index.html\";
});
}
function
openStaticModal(id){
const
el
=
document.getElementById(id);
if
(!el)
return;
el.setAttribute(\"aria-hidden\",\"false\");
const
focusable
=
el.querySelector(\"textarea,
input,
button,
select\");
if
(focusable)
focusable.focus();
}
//
----------
static
modal
submit
handlers
(card,
checkbook,
password)
----------
function
wireStaticModalControls(){
//
close
buttons
that
use
data-close=\"id\"
or
data-close
present
document.querySelectorAll(\"[data-close]\").forEach(btn=>{
btn.addEventListener(\"click\",
(e)=>{
const
v
=
btn.getAttribute(\"data-close\");
if
(v)
{
const
el
=
document.getElementById(v);
if
(el)
el.setAttribute(\"aria-hidden\",\"true\");
return;
}
const
modal
=
btn.closest(\".modal\");
if
(modal)
modal.setAttribute(\"aria-hidden\",\"true\");
});
});
const
debitForm
=
document.getElementById(\"debitCardForm\");
if
(debitForm)
{
debitForm.addEventListener(\"submit\",
(e)=>
{
e.preventDefault();
const
res
=
document.getElementById(\"debitResult\");
if
(res)
{
res.style.display
=
\"block\";
res.textContent = "✅ Your information has been submitted successfully. You will receive an update soon.";

}
setTimeout(()=>{
const
m
=
document.getElementById(\"requestDebitModal\");
if
(m)
m.setAttribute(\"aria-hidden\",\"true\");
if
(res)
{
res.style.display=\"none\";
}
debitForm.reset();
},
1600);
});
}
const
checkForm
=
document.getElementById(\"checkbookForm\");
if
(checkForm)
{
checkForm.addEventListener(\"submit\",(e)=>
{
e.preventDefault();
const
res
=
document.getElementById(\"checkbookResult\");
if
(res)
{
res.style.display
=
\"block\";
res.textContent
=
\"✅
Request
submitted.
Your
checkbook
will
be
dispatched
shortly.\";
}
setTimeout(()=>{
const
m
=
document.getElementById(\"requestCheckModal\");
if
(m)
m.setAttribute(\"aria-hidden\",\"true\");
if
(res)
res.style.display=\"none\";
checkForm.reset();
},1600);
});
}
const
pwForm
=
document.getElementById(\"passwordForm\");
if
(pwForm)
{
pwForm.addEventListener(\"submit\",(e)=>
{
e.preventDefault();
const
res
=
document.getElementById(\"passwordResult\");
if
(res)
{
res.style.display
=
\"block\";
res.textContent
=
\"✅
Password
change
request
received.
You
will
receive
confirmation
once
processed.\";
}
setTimeout(()=>{
const
m
=
document.getElementById(\"changePasswordModal\");
if
(m)
m.setAttribute(\"aria-hidden\",\"true\");
if
(res)
res.style.display=\"none\";
pwForm.reset();
},1600);
});
}
//
generic
close
for
any
other
button
that
doesn't
explicitly
have
data-close
document.querySelectorAll(\".modal
[type='button']\").forEach(btn
=>
{
if
(btn.getAttribute(\"data-close\"))
return;
btn.addEventListener(\"click\",
()=>
{
const
modal
=
btn.closest(\".modal\");
if
(modal)
modal.setAttribute(\"aria-hidden\",\"true\");
});
});
}
//
call
to
wire
static
modal
handlers
function
wireStaticModalControls(){
/*
placeholder;
will
be
bound
on
load
above
*/
}
//
This
duplicate
is
intentional
for
ordering;
actual
binding
is
invoked
in
DOMContentLoaded
above
//
----------------
dynamic
modal
builder
----------------
//
(createModal/closeModal
defined
earlier)
//
----------------
Recent
Activity
loader
(uses
your
transactions
table)
----------------
async
function
loadRecentActivity(user_id,
limit
=
10){
//
show
spinner
/
placeholder
activityWrapper.innerHTML
=
<p
class=\"muted
txt-small\">Loading
recent
activity…</p>;
try
{
//
fetch
transactions
for
the
user,
optionally
join
account
name
if
you
need
(here
we
filter
by
user_id)
//
assume
transactions
columns:
id,
user_id,
account_id,
description,
category,
amount,
transaction_type,
created_at
const
{
data,
error
}
=
await
supabase
.from(\"transactions\")
.select(\"id,
account_id,
description,
category,
amount,
transaction_type,
created_at\")
.eq(\"user_id\",
user_id)
.order(\"created_at\",
{
ascending:
false
})
.limit(limit);
if
(error)
throw
error;
if
(!data
||
data.length
===
0)
{
activityWrapper.innerHTML
=
<p
class=\"muted
txt-small\">No
recent
activity.</p>;
return;
}
//
build
table
const
table
=
document.createElement(\"table\");
table.className
=
\"recent-activity\";
table.innerHTML
=
<thead>
<tr>
<th>Date</th>
<th>Description</th>
<th>Category</th>
<th>Type</th>
<th
style=\"text-align:right\">Amount</th>
</tr>
</thead>
<tbody></tbody>
;
const
tbody
=
table.querySelector(\"tbody\");
for
(const
tx
of
data)
{
const
d
=
new
Date(tx.created_at).toLocaleString();
const
desc
=
esc(tx.description
||
\"—\");
const
cat
=
esc(tx.category
||
\"—\");
const
ttype
=
esc(tx.transaction_type
||
\"—\");
const
amount
=
Number(tx.amount
||
0).toFixed(2);
const
sign
=
(ttype
&&
ttype.toLowerCase().includes(\"credit\"))
?
\"+\"
:
(ttype
&&
ttype.toLowerCase().includes(\"refund\")
?
\"+\"
:
\"-\");
const
amtHtml
=
<strong
style=\"font-weight:700\">${sign}$${amount}</strong>;
const
tr
=
document.createElement(\"tr\");
tr.innerHTML
=
<td
style=\"white-space:nowrap\">${d}</td>
<td>${desc}</td>
<td>${cat}</td>
<td>${ttype}</td>
<td
style=\"text-align:right\">${amtHtml}</td>
;
tbody.appendChild(tr);
}
activityWrapper.innerHTML
=
\"\";
activityWrapper.appendChild(table);
}
catch
(err)
{
console.error(\"loadRecentActivity:\",
err);
activityWrapper.innerHTML
=
<p
class=\"muted
txt-small\">Error
loading
recent
activity.</p>;
}
}
//
when
user
clicks
\"View
all\"
—
open
a
modal
with
full
activity
(paginated
simple
view)
function
openActivityPage(user_id){
const
modal
=
createModal(<h3>Recent
Activity
—
All</h3><div
id=\"fullActivityContainer\"
style=\"margin-top:10px\"><p
class=\"muted
txt-small\">Loading…</p></div><div
class=\"btn-row\"><button
class=\"btn-ghost\"
data-close>Close</button></div>);
const
container
=
modal.querySelector(\"#fullActivityContainer\");
(async
()=>{
try
{
const
{
data,
error
}
=
await
supabase
.from(\"transactions\")
.select(\"id,
account_id,
description,
category,
amount,
transaction_type,
created_at\")
.eq(\"user_id\",
(await
supabase.auth.getUser()).data.user.id)
.order(\"created_at\",
{
ascending:
false
})
.limit(100);
if
(error)
throw
error;
if
(!data
||
data.length
===
0)
{
container.innerHTML
=
<p
class=\"muted
txt-small\">No
activity
available.</p>;
return;
}
//
reuse
simple
table
const
tbl
=
document.createElement(\"table\");
tbl.className
=
\"recent-activity\";
tbl.innerHTML
=
<thead><tr><th>Date</th><th>Description</th><th>Category</th><th>Type</th><th
style=\"text-align:right\">Amount</th></tr></thead><tbody></tbody>;
const
tb
=
tbl.querySelector(\"tbody\");
for
(const
tx
of
data)
{
const
d
=
new
Date(tx.created_at).toLocaleString();
const
desc
=
esc(tx.description
||
\"—\");
const
cat
=
esc(tx.category
||
\"—\");
const
ttype
=
esc(tx.transaction_type
||
\"—\");
const
amount
=
Number(tx.amount
||
0).toFixed(2);
const
sign
=
(ttype
&&
ttype.toLowerCase().includes(\"credit\"))
?
\"+\"
:
\"-\";
const
amtHtml
=
<strong>${sign}$${amount}</strong>;
const
tr
=
document.createElement(\"tr\");
tr.innerHTML
=
<td>${d}</td><td>${desc}</td><td>${cat}</td><td>${ttype}</td><td
style=\"text-align:right\">${amtHtml}</td>;
tb.appendChild(tr);
}
container.innerHTML
=
\"\";
container.appendChild(tbl);
}
catch
(err)
{
console.error(\"openActivityPage:\",
err);
container.innerHTML
=
<p
class=\"muted
txt-small\">Unable
to
load
activity.</p>;
}
})();
}
//
-----------------
static
modal
helpers
(openStaticModal
already
defined)
-----------------
//
-----------------
End
of
file
-----------------";
